name: Build and push

on:
  push:
    branches: [ master , staging ]

env:
  REGISTRY: ghcr.io
  FASTAPI_IMAGE_NAME: sunba23/sunbadev-api
  NGINX_IMAGE_NAME: sunba23/sunbadev-nginx

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        run: |
          if [ ${{ github.ref }} = 'refs/heads/master' ]; then
            echo "tag=prod" >> $GITHUB_OUTPUT
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "tag=staging" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Build and push FastAPI image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/prod.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FASTAPI_IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.FASTAPI_IMAGE_NAME }}:latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set environment variables
        id: env_vars
        run: |
          if [ ${{ github.ref }} = 'refs/heads/master' ]; then
            echo "DOMAIN=sunba.dev" >> $GITHUB_OUTPUT
          else
            echo "DOMAIN=staging.sunba.dev" >> $GITHUB_OUTPUT
          fi

      - name: Build frontend
        working-directory: frontend
        env:
          VITE_WS_URL: wss://${{ steps.env_vars.outputs.DOMAIN }}/ws/terminal/
        run: |
          npm ci
          npm run build
          [ -d "../nginx/dist" ] && rm -rf ../nginx/dist/*
          mv dist ../nginx/

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: nginx
          file: nginx/prod.Dockerfile
          push: true
          build-args: |
            DOMAIN=${{ steps.env_vars.outputs.DOMAIN }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.NGINX_IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.NGINX_IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set environment
        id: env
        run: |
          if [ ${{ github.ref }} = 'refs/heads/master' ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: deploy
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REPO_URL="https://github.com/sunba23/sunba.dev"
            DEPLOY_DIR=/home/deploy/sunbadev-${{ steps.env.outputs.env }}

            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Directory doesn't exist, cloning repository..."
              git clone --branch ${{ github.ref_name }} $REPO_URL $DEPLOY_DIR
            elif [ ! -d "$DEPLOY_DIR/.git" ]; then
              echo "Directory exists but is not a git repository..."
              rm -rf $DEPLOY_DIR
              git clone $REPO_URL $DEPLOY_DIR
            else
              echo "Directory exists. Resetting code to match origin"
              cd $DEPLOY_DIR
              git fetch origin ${{ github.ref_name }}
              git reset --hard origin/${{ github.ref_name }}
            fi

            cd $DEPLOY_DIR

            sudo kubectl apply -f kubernetes/overlays/${{ steps.env.outputs.env }}/namespace.yaml
            sudo kubectl apply -k kubernetes/overlays/${{ steps.env.outputs.env }}

            sudo kubectl rollout restart deployment/traefik-sunbadev -n ${{ steps.env.outputs.env }}
            sudo kubectl rollout restart deployment/api -n ${{ steps.env.outputs.env }}
            sudo kubectl rollout restart deployment/nginx -n ${{ steps.env.outputs.env }}
            sudo kubectl rollout status deployment/traefik-sunbadev -n ${{ steps.env.outputs.env }}
            sudo kubectl rollout status deployment/api -n ${{ steps.env.outputs.env }}
            sudo kubectl rollout status deployment/nginx -n ${{ steps.env.outputs.env }}
